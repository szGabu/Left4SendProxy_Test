name: Manual Build
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Project
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    env:
      SETUPTOOLS_USE_DISTUTILS: 'stdlib'
      GITHUB_SHA_SHORT: ${{ github.sha }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y clang g++-multilib git python3-pip zip
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Install Dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python --version
          pip install --upgrade pip setuptools wheel
          pip install pywin32
          echo "CC=cl.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CXX=cl.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup MSVC Environment (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $vsPath = &"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          & "$vsPath\Common7\Tools\VsDevCmd.bat" -arch=amd64

      - name: Install AMBuild
        shell: bash
        run: |
          pip install --upgrade pip setuptools wheel
          pip install ambuild

      - name: Prepare Alliedmodders Directory
        shell: bash
        run: mkdir alliedmodders

      - name: Prepare Sourcemod
        shell: bash
        run: |
          cd alliedmodders
          git clone --recursive https://github.com/alliedmodders/sourcemod -b 1.11-dev

      - name: Prepare L4D SDK
        shell: bash
        run: |
          cd alliedmodders
          git clone --mirror https://github.com/alliedmodders/hl2sdk hl2sdk-proxy-repo
          git clone hl2sdk-proxy-repo hl2sdk-l4d2 -b l4d2
          git clone hl2sdk-proxy-repo hl2sdk-l4d -b l4d

      - name: Prepare Metamod Source
        shell: bash
        run: |
          cd alliedmodders
          git clone https://github.com/alliedmodders/metamod-source mmsource-1.10 -b 1.10-dev

      - name: Configure AMBuild (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cd extension
          mkdir build
          cd build
          python3 ../configure.py --hl2sdk-root=../../alliedmodders --sm-path=../../alliedmodders/sourcemod --mms-path=../../alliedmodders/mmsource-1.10 --sdks l4d,l4d2

      - name: Configure AMBuild (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd extension
          mkdir build
          cd build
          python ../configure.py --hl2sdk-root=../../alliedmodders --sm-path=../../alliedmodders/sourcemod --mms-path=../../alliedmodders/mmsource-1.10 --sdks l4d,l4d2

      - name: Run AMBuild (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cd extension/build
          ambuild

      - name: Run AMBuild (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd extension/build
          ambuild

      - name: Copy to addons directory (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          mkdir -p addons/sourcemod
          cp -r ./extension/build/package/addons/sourcemod/extensions addons/sourcemod

      - name: Copy to addons directory (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          mkdir addons\sourcemod
          Copy-Item -Recurse -Path extension\build\package\addons\sourcemod\extensions -Destination addons\sourcemod

      - name: Upload Binary (Package)
        uses: actions/upload-artifact@v4
        with:
          name: sendproxy-${{ matrix.os }}
          path: ./addons

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Artifact (Linux)
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: sendproxy-ubuntu-latest
          path: /tmp/Left4SendProxy/linux

      - name: Download Artifact (Windows)
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: sendproxy-windows-latest
          path: /tmp/Left4SendProxy/windows

      - name: Get latest tag
        id: tag
        run: |
          echo "TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Zip sourcemod directory (Linux)
        run: |
          (cd /tmp/Left4SendProxy/linux/sourcemod/ && zip -r /tmp/linux_release.zip .)

      - name: Zip sourcemod directory (Windows)
        run: |
          (cd /tmp/Left4SendProxy/windows/sourcemod/ && zip -r /tmp/windows_release.zip .)

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          files: |
            /tmp/linux_release.zip
            /tmp/windows_release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
